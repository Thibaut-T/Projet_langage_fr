#line 1 "fransous.lex.cpp"

#line 3 "fransous.lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 71
#define YY_END_OF_BUFFER 72
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[765] =
    {   0,
        0,    0,   72,   70,    5,    2,    3,    4,   70,   70,
       57,   58,   66,   64,   69,   65,   67,   63,   48,   49,
       68,   50,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       53,    0,    0,    0,   63,   63,    0,   68,   51,   54,
       52,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,

       17,   61,   17,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   47,   61,   61,   40,   61,   26,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   17,   61,   61,   61,   62,
        0,    0,    0,    6,    0,   63,    0,   63,   61,   61,
       61,   61,   61,   61,   61,   11,   61,   30,   61,   61,
       30,   61,   61,   61,   61,   61,   32,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   29,   61,   29,   61,   61,   31,   61,   31,   61,

       61,   61,   61,   61,   30,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,    1,    0,   61,   61,   61,   61,   61,
       61,   61,   29,   61,   61,   31,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   54,   61,    0,   61,   61,    0,
        0,   61,   61,   61,   61,   61,   61,   61,   61,   22,
       61,   22,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   41,   61,

       61,   61,   61,   61,   61,   60,    0,   61,   61,   61,
       61,   61,   61,   61,    0,    0,   61,   61,   22,   61,
       61,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       59,   61,   18,   61,   61,   61,   34,    8,   61,   61,
       61,   61,   61,   61,   61,   15,    0,    0,    0,    0,
       61,    0,    0,    0,    0,    0,    0,   61,   61,   61,
       61,   61,   61,   61,   61,    0,   61,    0,   61,   61,
       61,   10,   61,   61,   19,   29,   61,   61,   61,   61,
       61,    0,   61,   61,    0,   61,   61,   61,   61,   61,
       61,   61,   25,    0,    0,    0,    0,   61,   61,   61,

       61,   61,   61,    0,    0,   61,   61,   61,   61,   61,
       61,   61,   61,    0,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,    0,    0,    0,    0,    0,
       61,    0,    0,    0,    0,    0,    0,   61,   61,   61,
       61,   61,   61,   61,   61,    0,   61,    0,    0,   61,
       33,   61,   61,   61,   61,   61,   45,   61,    0,   61,
        0,   61,   61,   61,   61,   61,   61,   61,    0,    0,
        0,    0,    0,   61,   61,   61,   42,   61,    0,    0,
       61,   61,   61,   61,   61,   61,    0,   61,   61,   61,
       61,   30,   61,   44,   61,   61,   12,    0,    0,    0,

        0,   61,    0,    0,    0,    0,    0,   61,   61,   61,
       61,   61,   61,    0,    0,    0,   43,    0,    0,   61,
       61,   61,   61,   61,   61,    0,   61,    0,   61,   61,
       61,   61,    0,    0,    0,    0,   61,   61,   61,   61,
        0,    0,    0,   61,   61,   61,   61,    0,    7,   46,
       61,   61,   61,    0,    0,    0,    0,    0,   20,    0,
        0,    0,    0,    0,    0,   61,   61,   61,   61,   61,
        0,    0,    0,    0,    0,   38,   61,   61,   61,   31,
       13,   61,   61,    0,    0,    0,    0,    0,   61,   61,
       61,    0,    0,    0,   61,   61,   61,   61,   53,    9,

        0,   21,   16,    0,    0,    0,   61,   61,   49,   39,
        0,    0,    0,    0,    0,   37,   50,   61,    0,    0,
       61,   49,   27,   28,    0,   50,   61,   61,    0,    0,
        0,    0,   61,   61,    0,    0,    0,    0,    0,    0,
        0,   61,    0,    0,   61,    0,    0,    0,   56,   24,
        0,    0,   55,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   14,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   35,    0,    0,    0,
        0,    0,   36,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   23,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    1,    1,    1,    1,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,    1,   18,
       19,   20,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   22,   22,   30,   31,   32,   33,   34,
       35,   36,   37,   38,   39,   40,   22,   41,   22,   22,
        1,    1,    1,    1,   22,    1,   42,   22,   43,   44,

       45,   46,   47,   48,   49,   50,   22,   51,   52,   53,
       54,   55,   56,   57,   58,   59,   60,   61,   22,   62,
       22,   22,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[63] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    1,    1,    1,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4
    } ;

static const flex_int16_t yy_base[768] =
    {   0,
        0,    0,  919,  920,  920,  920,  920,  920,  899,    0,
      920,  920,  920,  920,  920,  920,   53,   50,  920,   52,
      898,  897,   43,    0,   49,   47,   37,   72,   35,   51,
       44,   54,   85,   80,   65,   66,   74,   89,   86,   93,
      862,  854,   25,  859,   60,   92,   73,   92,  870,  854,
      920,  903,  113,   95,  135,  140,  146,  920,  920,  920,
      920,    0,  883,  875,  869,  860,  851,  845,  100,  870,
      865,  106,  847,  842,  132,  115,  853,  864,  855,  841,
      866,  862,  861,  843,  838,  837,  866,  123,  856,  834,
      846,  824,  845,  858,  822,  836,  857,  138,  836,  120,

      846,  843,  823,  820,  145,  130,  828,  819,  813,  124,
      817,  812,  816,  133,  138,  826,  808,  807,    0,  810,
      137,  811,  138,  146,  805,  809,  812,  807,  188,  798,
      798,  797,  811,  812,  143,  801,  798,  145,  810,  920,
      844,  835,  151,  920,  197,  186,  833,  832,  818,  810,
      820,  795,  786,  797,  805,    0,  811,  810,  781,  788,
      787,  799,  802,  776,  779,  785,    0,  779,  793,  198,
      805,  770,  199,  783,  789,  767,  778,  783,  761,  784,
      762,  782,  786,  759,  763,  785,  780,  774,  762,  756,
      750,  174,  774,  154,  165,  777,  185,  755,  168,  756,

      747,  758,  745,  752,  751,  741,  741,  744,  750,  746,
      743,  736,    0,  735,  729,  211,  732,  746,  731,  742,
      730,  725,  731,    0,  177,  726,  724,  724,  728,  730,
      724,  718,  170,  180,  725,  170,  726,  751,  736,  740,
      728,  712,  716,  743,  726,  734,  720,  702,  710,  737,
      732,  715,  710,  713,    0,  732,  213,  718,  710,  217,
      221,  695,  728,  707,  694,  713,  691,  719,  698,  221,
      717,  241,  696,  712,  712,  717,  688,  688,  694,  706,
      700,  700,  682,  676,  676,  675,  701,  705,  245,  678,
      683,  249,  684,  668,  672,  679,  661,  669,    0,  676,

      671,  674,  660,  672,  671,    0,  214,    0,  656,  669,
      656,  652,  653,  652,  659,  655,  658,    0,    0,  657,
      652,  652,  658,  649,  643,  643,  642,  647,  652,  257,
        0,  668,    0,  671,  646,  649,    0,    0,  653,  631,
      659,  664,  636,  642,  629,    0,  221,  646,  663,  662,
      653,  639,  620,  637,  618,  635,  190,  627,  644,  622,
      624,  649,  628,  634,  612,  630,  642,  215,  621,  640,
      633,    0,  618,  610,    0,    0,  632,  611,  610,  633,
      625,  621,  610,  601,  597,  604,  607,  590,  597,  603,
      590,  601,    0,  221,  585,  602,  601,  593,  589,  591,

      594,  595,    0,  583,  585,  578,  589,  588,  580,  582,
      581,  584,  575,  571,  601,  589,  579,  566,  585,  563,
      595,  583,  573,  560,  571,  578,  581,  261,  584,  580,
      578,  552,  265,  560,  270,  555,  553,  552,  580,  559,
      558,  563,  541,  274,  277,  567,  563,  544,  543,  539,
        0,  570,  549,  562,  547,  539,    0,  552,  550,  529,
      527,  541,  528,  526,  538,  525,  536,    0,  522,  525,
      278,  529,  524,  522,  530,  529,    0,  513,  512,  526,
      281,  513,  524,  523,  515,  507,  505,  528,  538,  505,
      516,    0,  528,    0,  506,  505,  920,  528,  253,  520,

      517,  522,  255,  496,  494,  492,  501,  496,  516,  494,
      486,  515,  493,  518,  497,  502,    0,  480,  479,  502,
      480,  511,  475,  489,  508,  507,  486,  485,  472,  483,
      474,  473,  476,  236,  467,  464,  469,  468,  460,  468,
      459,  456,  471,  458,  454,  468,  467,  466,    0,    0,
      472,  450,  449,  466,  473,  476,  479,  288,    0,  449,
      453,  456,  451,  291,  437,  460,  438,  439,  470,  449,
      461,  439,  453,  431,  430,    0,  452,  430,  429,    0,
      920,  426,  425,  421,  428,  432,  435,  292,  420,  421,
      432,  431,  430,  421,  416,  415,  446,  425,    0,  920,

      430,  920,  920,  433,  407,  410,  440,  419,  295,    0,
      296,  299,  300,  303,  304,    0,  307,  418,  402,  405,
      415,  308,  920,  920,  311,  312,  423,  401,  421,  417,
      398,  394,  417,  395,  287,  296,  277,  426,  425,  404,
      394,  390,  389,  385,  387,  389,  278,  291,    0,  920,
      417,  396,    0,  380,  379,  415,  412,  393,  390,  404,
      382,  381,  371,  385,  369,  385,  382,  366,  365,  920,
      320,  325,  388,  400,  365,  378,   51,   40,   79,  326,
      329,  110,  178,  330,  333,  208,  214,  238,  233,  229,
      280,  311,  291,  292,  321,  302,  299,  290,  325,  306,

      305,  306,  316,  316,  297,  297,  333,  314,  315,  314,
      315,  304,  304,  318,  319,  325,  326,  330,  334,  311,
      315,  341,  321,  322,  334,  335,  318,  322,  338,  339,
      331,  332,  348,  360,  329,  342,  350,  330,  331,  340,
      341,  336,  349,  344,  345,  372,  920,  353,  362,  342,
      343,  357,  920,  398,  399,  402,  384,  386,  367,  387,
      368,  369,  920,  920,  411,  413,  416
    } ;

static const flex_int16_t yy_def[768] =
    {   0,
      764,    1,  764,  764,  764,  764,  764,  764,  764,  765,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      764,  767,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,

      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  764,
      767,  764,  764,  764,  764,  764,  764,  764,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,

      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  764,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  764,  766,  766,  764,
      764,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,

      766,  766,  766,  766,  766,  766,  764,  766,  766,  766,
      766,  766,  766,  766,  764,  764,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  764,  764,  764,  764,
      766,  764,  764,  764,  764,  764,  764,  766,  766,  766,
      766,  766,  766,  766,  766,  764,  766,  764,  766,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  766,  766,
      766,  764,  766,  766,  764,  766,  766,  766,  766,  766,
      766,  766,  766,  764,  764,  764,  764,  766,  766,  766,

      766,  766,  766,  764,  764,  766,  766,  766,  766,  766,
      766,  766,  766,  764,  766,  766,  766,  766,  766,  766,
      766,  766,  766,  766,  766,  764,  764,  764,  764,  764,
      766,  764,  764,  764,  764,  764,  764,  766,  766,  766,
      766,  766,  766,  766,  766,  764,  766,  764,  764,  766,
      766,  766,  766,  766,  766,  766,  766,  766,  764,  766,
      764,  766,  766,  766,  766,  766,  766,  766,  764,  764,
      764,  764,  764,  766,  766,  766,  766,  766,  764,  764,
      766,  766,  766,  766,  766,  766,  764,  766,  766,  766,
      766,  766,  766,  766,  766,  766,  764,  764,  764,  764,

      764,  766,  764,  764,  764,  764,  764,  766,  766,  766,
      766,  766,  766,  764,  764,  764,  766,  764,  764,  766,
      766,  766,  766,  766,  766,  764,  766,  764,  766,  766,
      766,  766,  764,  764,  764,  764,  766,  766,  766,  766,
      764,  764,  764,  766,  766,  766,  766,  764,  766,  766,
      766,  766,  766,  764,  764,  764,  764,  764,  766,  764,
      764,  764,  764,  764,  764,  766,  766,  766,  766,  766,
      764,  764,  764,  764,  764,  766,  766,  766,  766,  766,
      764,  766,  766,  764,  764,  764,  764,  764,  766,  766,
      766,  764,  764,  764,  766,  766,  766,  766,  766,  764,

      764,  764,  764,  764,  764,  764,  766,  766,  766,  766,
      764,  764,  764,  764,  764,  766,  766,  766,  764,  764,
      766,  766,  764,  764,  764,  766,  766,  766,  764,  764,
      764,  764,  766,  766,  764,  764,  764,  764,  764,  764,
      764,  766,  764,  764,  766,  764,  764,  764,  766,  764,
      764,  764,  766,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,

      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,    0,  764,  764,  764
    } ;

static const flex_int16_t yy_nxt[983] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,    4,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   24,   24,   29,   24,
       30,   24,   31,   32,   24,   33,   34,   35,   24,   24,
       24,   36,   37,   38,   39,   40,   24,   24,   41,   42,
       24,   43,   44,   45,   46,   24,   47,   48,   49,   24,
       50,   24,   53,   55,   58,   56,   87,   54,   63,   69,
       59,   75,   64,  126,   57,  692,   70,   78,  127,   89,
       65,   71,   91,   79,  693,  105,   93,   88,   66,   94,
       72,   76,   81,   67,   57,   77,   73,  144,   80,   90,

       82,   68,   74,   92,   83,   97,  106,   95,  101,   98,
       96,  107,  129,   84,  134,  110,  108,  135,  102,  130,
       85,  111,  142,  694,  109,   86,   99,  112,  103,  100,
      113,  145,  116,  114,  121,  155,  156,  115,  117,  104,
      136,  122,  131,  118,  119,  132,  123,  120,  133,  143,
      146,  137,  145,   55,  162,   56,  147,  164,  147,   57,
      142,  148,  159,  156,   57,  176,  697,  163,  177,  187,
      143,  165,  190,  196,  188,  207,  197,  191,  198,   57,
      203,  156,  199,  209,   57,  214,  217,  143,  219,  208,
      218,  220,  225,  235,  225,  231,  215,  236,  210,  144,

      232,  146,  257,  260,  257,  261,  280,  283,  143,  285,
       57,  288,  281,  284,  291,  307,  329,  307,  315,  286,
      698,  316,  289,  324,  326,  366,  292,  366,  330,  325,
       57,  432,  701,  145,  327,  347,  348,  437,  349,  352,
      353,  426,  354,  357,  353,  368,  354,  368,  427,  382,
      350,  382,  448,  385,  145,  385,  394,  395,  702,  396,
      355,  414,  469,  414,  355,  499,  703,  499,  470,  503,
      704,  503,  397,  449,  505,  356,  505,  705,  514,  356,
      514,  515,  534,  515,  534,  543,  555,  543,  560,  556,
      585,  561,  604,  586,  604,  606,  620,  606,  620,  635,

      636,  635,  636,  637,  638,  637,  638,  639,  640,  639,
      640,  641,  646,  641,  646,  647,  648,  647,  648,  654,
      656,  658,  666,  668,  686,  657,  686,  659,  667,  687,
      695,  687,  695,  696,  699,  696,  699,  700,  706,  700,
      655,  707,  708,  709,  669,  710,  711,  712,  713,  714,
      715,  716,  717,  718,  719,  720,  721,  722,  723,  724,
      725,  726,  727,  728,  729,  730,  731,  732,  733,  734,
      735,  736,  737,  738,  739,  740,  741,  742,  743,  744,
      745,   59,   59,  746,  747,  748,  747,  749,  750,  751,
       61,   59,  752,  747,   61,   61,  753,  753,  754,  755,

      756,  753,  757,  758,  757,  758,  759,  760,  759,  761,
      762,  763,  763,  763,   52,   62,   62,  141,  141,  141,
      691,  690,  689,  688,  685,  684,  683,  682,  681,  670,
      680,  679,  678,  677,  676,  675,  674,  673,  672,  671,
      670,  670,  665,  653,  664,  650,  649,  663,  662,  661,
      660,  653,  653,  652,  650,  651,  650,  649,  649,  645,
      644,  643,  642,  634,  633,  632,  631,  630,  629,  628,
      627,  616,  626,  625,  624,  623,  610,  622,  621,  603,
      602,  619,  600,  599,  618,  616,  617,  616,  615,  614,
      613,  612,  611,  610,  610,  609,  608,  607,  600,  602,

      603,  602,  605,  603,  602,  601,  600,  599,  598,  597,
      581,  580,  596,  595,  576,  594,  593,  592,  591,  590,
      589,  559,  588,  587,  584,  583,  582,  550,  549,  581,
      580,  581,  580,  579,  578,  577,  576,  576,  575,  574,
      573,  572,  571,  570,  569,  568,  567,  566,  559,  565,
      564,  563,  562,  559,  558,  557,  554,  553,  552,  551,
      550,  549,  550,  549,  548,  547,  546,  545,  544,  517,
      542,  541,  540,  539,  538,  537,  536,  535,  533,  497,
      532,  494,  531,  492,  530,  529,  528,  527,  526,  525,
      524,  523,  522,  521,  520,  517,  519,  518,  517,  516,

      513,  512,  511,  510,  509,  508,  507,  506,  504,  497,
      502,  501,  500,  498,  497,  496,  494,  495,  494,  493,
      492,  492,  491,  490,  489,  488,  487,  486,  457,  485,
      484,  483,  451,  482,  481,  480,  479,  478,  477,  476,
      475,  474,  473,  472,  471,  468,  467,  466,  465,  464,
      463,  462,  461,  460,  457,  459,  458,  457,  456,  455,
      454,  453,  451,  452,  451,  450,  447,  446,  445,  444,
      443,  442,  441,  440,  439,  438,  436,  435,  434,  433,
      432,  431,  430,  429,  428,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  413,  412,  411,  410,

      376,  375,  372,  409,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  346,  393,  392,  391,  390,
      389,  388,  338,  337,  387,  333,  386,  384,  383,  381,
      380,  379,  378,  376,  375,  377,  376,  375,  372,  374,
      373,  372,  371,  370,  369,  367,  365,  364,  363,  362,
      361,  360,  359,  358,  346,  351,  346,  345,  344,  343,
      342,  341,  340,  338,  337,  339,  338,  337,  336,  333,
      335,  334,  333,  332,  331,  328,  323,  322,  321,  320,
      319,  318,  317,  314,  313,  312,  311,  310,  309,  308,
      306,  305,  304,  255,  303,  302,  301,  300,  299,  298,

      297,  296,  295,  294,  293,  290,  287,  282,  279,  278,
      277,  276,  275,  274,  273,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  259,  258,  256,  255,
      254,  253,  252,  251,  250,  249,  248,  247,  246,  245,
      244,  243,  242,  241,  240,  239,  238,  148,  148,  144,
      140,  237,  234,  233,  230,  229,  228,  227,  226,  224,
      223,  222,  221,  216,  167,  213,  212,  211,  206,  205,
      204,  202,  201,  200,  195,  194,  193,  192,  189,  186,
      185,  184,  183,  182,  181,  180,  179,  178,  175,  174,
      173,  172,  171,  170,  169,  167,  168,  167,  166,  161,

      160,  158,  157,  154,  153,  152,  151,  150,  149,  140,
      139,  138,  128,  125,  124,   61,   60,   51,  764,    3,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764
    } ;

static const flex_int16_t yy_chk[983] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,   17,   18,   20,   18,   29,   17,   23,   25,
       20,   26,   23,   43,   18,  677,   25,   27,   43,   30,
       23,   25,   31,   27,  678,   35,   32,   29,   23,   32,
       25,   26,   28,   23,   18,   26,   25,   54,   27,   30,

       28,   23,   25,   31,   28,   33,   35,   32,   34,   33,
       32,   36,   45,   28,   47,   37,   36,   47,   34,   45,
       28,   37,   53,  679,   36,   28,   33,   37,   34,   33,
       38,   54,   39,   38,   40,   69,   69,   38,   39,   34,
       48,   40,   46,   39,   39,   46,   40,   39,   46,   53,
       55,   48,   54,   56,   75,   56,   57,   76,   57,   55,
      143,   57,   72,   72,   56,   88,  682,   75,   88,   98,
       53,   76,  100,  105,   98,  114,  105,  100,  106,   55,
      110,  110,  106,  115,   56,  121,  123,  143,  124,  114,
      123,  124,  129,  138,  129,  135,  121,  138,  115,  145,

      135,  146,  170,  173,  170,  173,  192,  194,  143,  195,
      146,  197,  192,  194,  199,  216,  236,  216,  225,  195,
      683,  225,  197,  233,  234,  270,  199,  270,  236,  233,
      146,  357,  686,  145,  234,  257,  257,  357,  257,  260,
      260,  347,  260,  261,  261,  272,  261,  272,  347,  289,
      257,  289,  368,  292,  145,  292,  307,  307,  687,  307,
      260,  330,  394,  330,  261,  428,  688,  428,  394,  433,
      689,  433,  307,  368,  435,  260,  435,  690,  444,  261,
      444,  445,  471,  445,  471,  481,  499,  481,  503,  499,
      534,  503,  558,  534,  558,  564,  588,  564,  588,  609,

      611,  609,  611,  612,  613,  612,  613,  614,  615,  614,
      615,  617,  622,  617,  622,  625,  626,  625,  626,  635,
      636,  637,  647,  648,  671,  636,  671,  637,  647,  672,
      680,  672,  680,  681,  684,  681,  684,  685,  691,  685,
      635,  692,  693,  694,  648,  695,  696,  697,  698,  699,
      700,  701,  702,  703,  704,  705,  706,  707,  708,  709,
      710,  711,  712,  713,  714,  715,  716,  717,  718,  719,
      720,  721,  722,  723,  724,  725,  726,  727,  728,  729,
      730,  731,  732,  733,  734,  735,  736,  737,  738,  739,
      740,  741,  742,  743,  744,  745,  746,  748,  749,  750,

      751,  752,  754,  755,  754,  755,  756,  757,  756,  758,
      759,  760,  761,  762,  765,  766,  766,  767,  767,  767,
      676,  675,  674,  673,  669,  668,  667,  666,  665,  664,
      663,  662,  661,  660,  659,  658,  657,  656,  655,  654,
      652,  651,  646,  645,  644,  643,  642,  641,  640,  639,
      638,  634,  633,  632,  631,  630,  629,  628,  627,  621,
      620,  619,  618,  608,  607,  606,  605,  604,  601,  598,
      597,  596,  595,  594,  593,  592,  591,  590,  589,  587,
      586,  585,  584,  583,  582,  579,  578,  577,  575,  574,
      573,  572,  571,  570,  569,  568,  567,  566,  565,  563,

      562,  561,  560,  557,  556,  555,  554,  553,  552,  551,
      548,  547,  546,  545,  544,  543,  542,  541,  540,  539,
      538,  537,  536,  535,  533,  532,  531,  530,  529,  528,
      527,  526,  525,  524,  523,  522,  521,  520,  519,  518,
      516,  515,  514,  513,  512,  511,  510,  509,  508,  507,
      506,  505,  504,  502,  501,  500,  498,  496,  495,  493,
      491,  490,  489,  488,  487,  486,  485,  484,  483,  482,
      480,  479,  478,  476,  475,  474,  473,  472,  470,  469,
      467,  466,  465,  464,  463,  462,  461,  460,  459,  458,
      456,  455,  454,  453,  452,  450,  449,  448,  447,  446,

      443,  442,  441,  440,  439,  438,  437,  436,  434,  432,
      431,  430,  429,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  404,  402,  401,  400,
      399,  398,  397,  396,  395,  392,  391,  390,  389,  388,
      387,  386,  385,  384,  383,  382,  381,  380,  379,  378,
      377,  374,  373,  371,  370,  369,  367,  366,  365,  364,
      363,  362,  361,  360,  359,  358,  356,  355,  354,  353,
      352,  351,  350,  349,  348,  345,  344,  343,  342,  341,
      340,  339,  336,  335,  334,  332,  329,  328,  327,  326,

      325,  324,  323,  322,  321,  320,  317,  316,  315,  314,
      313,  312,  311,  310,  309,  305,  304,  303,  302,  301,
      300,  298,  297,  296,  295,  294,  293,  291,  290,  288,
      287,  286,  285,  284,  283,  282,  281,  280,  279,  278,
      277,  276,  275,  274,  273,  271,  269,  268,  267,  266,
      265,  264,  263,  262,  259,  258,  256,  254,  253,  252,
      251,  250,  249,  248,  247,  246,  245,  244,  243,  242,
      241,  240,  239,  238,  237,  235,  232,  231,  230,  229,
      228,  227,  226,  223,  222,  221,  220,  219,  218,  217,
      215,  214,  212,  211,  210,  209,  208,  207,  206,  205,

      204,  203,  202,  201,  200,  198,  196,  193,  191,  190,
      189,  188,  187,  186,  185,  184,  183,  182,  181,  180,
      179,  178,  177,  176,  175,  174,  172,  171,  169,  168,
      166,  165,  164,  163,  162,  161,  160,  159,  158,  157,
      155,  154,  153,  152,  151,  150,  149,  148,  147,  142,
      141,  139,  137,  136,  134,  133,  132,  131,  130,  128,
      127,  126,  125,  122,  120,  118,  117,  116,  113,  112,
      111,  109,  108,  107,  104,  103,  102,  101,   99,   97,
       96,   95,   94,   93,   92,   91,   90,   89,   87,   86,
       85,   84,   83,   82,   81,   80,   79,   78,   77,   74,

       73,   71,   70,   68,   67,   66,   65,   64,   63,   52,
       50,   49,   44,   42,   41,   22,   21,    9,    3,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764,  764,  764,  764,  764,  764,  764,  764,  764,
      764,  764
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "fransous.l"
#line 4 "fransous.l"
  #include <stdio.h>
  #include <stdlib.h>
  #include "fransous.bison.hpp"
#line 917 "fransous.lex.cpp"
#line 918 "fransous.lex.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 9 "fransous.l"

#line 1137 "fransous.lex.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 765 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 920 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 10 "fransous.l"
{return NON; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 11 "fransous.l"
{  return '\n'; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 12 "fransous.l"
{ }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 13 "fransous.l"
{ }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 14 "fransous.l"
{ }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 16 "fransous.l"
{return commentaire;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 17 "fransous.l"
{return PRINT;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 18 "fransous.l"
{return SWITCH;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 19 "fransous.l"
{return ENDSWITCH;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 20 "fransous.l"
{return DEFAULT;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 21 "fransous.l"
{ return CASE;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 22 "fransous.l"
{ return BREAK;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 23 "fransous.l"
{return WHILE;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 24 "fransous.l"
{return ENDWHILE;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 25 "fransous.l"
{return DO;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 26 "fransous.l"
{return ENDDO;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 27 "fransous.l"
{ return IF; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 28 "fransous.l"
{ return THEN; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 29 "fransous.l"
{ return ELSE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 30 "fransous.l"
{return FONCTION;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 31 "fransous.l"
{ return ENDIF; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 32 "fransous.l"
{ return FOR;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 33 "fransous.l"
{return FOREACH;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 34 "fransous.l"
{ return ENDFOR;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 35 "fransous.l"
{return BETWEEN;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 36 "fransous.l"
{return AND;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 37 "fransous.l"
{return INCR;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 38 "fransous.l"
{return DECR;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 39 "fransous.l"
{ return SIN;  }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 40 "fransous.l"
{ return COS;  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 41 "fransous.l"
{ return TAN; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 42 "fransous.l"
{return EXP;};
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 43 "fransous.l"
{return SQRT;};
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 44 "fransous.l"
{return POW;};
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 45 "fransous.l"
{ return OPENFR;};
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 46 "fransous.l"
{ return OPENFW;};
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 47 "fransous.l"
{return SUPPR;};
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 48 "fransous.l"
{return NEWNAME;};
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 49 "fransous.l"
{return TOLOWER;};
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 50 "fransous.l"
{return EN;};
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 51 "fransous.l"
{return DANS;};
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 52 "fransous.l"
{return JUSQUE;};
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 53 "fransous.l"
{return FIRST;};
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 54 "fransous.l"
{return LAST;};
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 55 "fransous.l"
{return SIZE;};
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 56 "fransous.l"
{return WAIT;};
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 57 "fransous.l"
{return DE;};
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 58 "fransous.l"
{ return SEPARATOR;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 59 "fransous.l"
{return INF;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 60 "fransous.l"
{return SUP;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 61 "fransous.l"
{return INFEG; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 62 "fransous.l"
{return SUPEG; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 63 "fransous.l"
{return DIFF; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 64 "fransous.l"
{return EGAL; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 65 "fransous.l"
{return INCREMENTER;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 66 "fransous.l"
{return DECREMENTER;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 67 "fransous.l"
{  return '('; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 68 "fransous.l"
{  return ')'; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 69 "fransous.l"
{return VRAI;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 70 "fransous.l"
{return FAUX;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 72 "fransous.l"
{ 
                         strcpy( yylval.nom, yytext) ;
                         return VAR;
                       }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 78 "fransous.l"
{strcpy( yylval.nom, yytext) ;
                         return VARAPO;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 82 "fransous.l"
{ // s'il s'agit d'un nombre on le stocke dans le champ "valeur"
                                      yylval.valeur = atof(yytext);
                                      return NUM;
                                    }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 87 "fransous.l"
{ return ADD; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 88 "fransous.l"
{ return SUB; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 89 "fransous.l"
{ return MULT; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 90 "fransous.l"
{ return DIV; } /*Peut-être penser à un autre nom pour l'opérateur*/
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 93 "fransous.l"
{  return '='; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 94 "fransous.l"
{return ',';}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 97 "fransous.l"
{ printf ("Le programme est correct.\n"); return 0;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 98 "fransous.l"
{  printf ("Erreur lexicale : %s\n", yytext); return 0; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 100 "fransous.l"
ECHO;
	YY_BREAK
#line 1562 "fransous.lex.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 765 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 765 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 764);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 100 "fransous.l"


